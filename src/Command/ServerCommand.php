<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace Raylin666\Framework\Command;

use Exception;
use Raylin666\Framework\Contract\ServerStateInterface;
use Raylin666\Framework\Helper\ServerStateHelper;
use Raylin666\Server\Contract\ServerInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class ServerCommand
 * @package Raylin666\Framework\Command
 */
abstract class ServerCommand extends Command
{
    /**
     * Console configure
     */
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->container->singleton(ServerStateInterface::class, function () {
            return new ServerStateHelper();
        });

        $this->addArgument('status', InputArgument::OPTIONAL, '服务状态类型 status | start | reload | stop');
        $this->addOption('daemon', 'd', InputOption::VALUE_NONE, '是否守护进程 --daemon | -d');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     * @return int|void
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;
        $state = $this->setServerStatusType($input);
        $this->isDaemon($input);
        $this->$state();
        exit(1);
    }

    /**
     * 获取服务状态类型
     * @param InputInterface $input
     * @return string
     * @throws Exception
     */
    protected function setServerStatusType(InputInterface $input): string
    {
        $status = $input->getArgument('status') ?: ServerStateHelper::SERVER_TYPE_STATUS;
        $this->getServerState()->withServerStatusType($status);
        return $status;
    }

    /**
     * 是否守护进程运行
     * @param InputInterface $input
     * @return bool
     */
    protected function isDaemon(InputInterface $input): bool
    {
        $isDaemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        $this->getServerState()->withDaemon($isDaemon);
        return $isDaemon;
    }

    /**
     * @return ServerInterface
     */
    protected function getServer(): ServerInterface
    {
        return $this->container->get(ServerInterface::class);
    }

    /**
     * @return ServerStateHelper
     */
    protected function getServerState(): ServerStateHelper
    {
        return $this->container->get(ServerStateInterface::class);
    }
}